# Guidelines: Endpoints to have no starting or ending forward slash.
# Capabilities are build using below 4 properties:
    # Platform (android or ios)
    # deviceType (real or virtual).
    # deviceName (say iphone_7 or samsung_10) - [Real- with deviceID settings or virtual - Virtual with say avd settings for android]
    # host (say app picked from local - specified as a path OR app hosted on a server - specified as a http URL)

# Choose an env here: env="local", "browserstack"
host="browserstack"

# Platform to chose are: "android", "ios"
platformName="android"

# deviceType to chose are: "virtual", "real"
deviceType="virtual"

# If you want to test with a specific device; then the only choice you have got is to run your tests in series.
# Since you cannot choose just one device and run tests in parallel. In that case, go to junit.platform.properties file and
# change junit.jupiter.execution.parallel.enabled=false and then you can run with a specific device of your choice (say: Pixel_4_API_31).
# Note that if you are running tests in one of the valid parallel modes, than this device choice is ignored and the devices
# are rather picked from AndroidEmulators enum class (or ios class) based on if the device is real or virtual. 
deviceName="Pixel_4_API_31"

# Place to put all your desired capabilities
pathJunitPlatformProperties="./src/main/resources/junit-platform.properties"

# Place to put all your desired capabilities
pathDesiredCapabilities="./desired-capabilities"

# Virtual devices will have paths like below.
pathAndroidCapabilities= ${pathDesiredCapabilities}"/android"
pathAndroidCommonCapabilities= ${pathAndroidCapabilities}"/android-common-capabilities.json"
pathAndroidEmulatorDefaultCapabilities= ${pathAndroidCapabilities}"/android-emulator-default-capabilities.json"

pathIOSCapabilities= ${pathDesiredCapabilities}"/ios"
pathIOSCommonCapabilities= ${pathIOSCapabilities}"/ios-common-capabilities.json"
pathIOSSimulatorDefaultCapabilities= ${pathIOSCapabilities}"/ios-simulator-default-capabilities.json"

# Real devices will have paths like below: (Will be used in capabilities class as a combination of 'pathDesiredCapabilities' and 'deviceName').
# pathRealDeviceCapabilities= ${pathDesiredCapabilities}"/iphone_7.json"

# apps path (android and ios)
pathAndroidApp= "./app/Android.SauceLabs.Mobile.Sample.app.2.7.1.apk"
pathIOSApp= "./app/to-be-added-Android.SauceLabs.Mobile.Sample.app.2.7.1.apk"

# https://github.com/saucelabs/sample-app-mobile#deep-linking
# deepLink URLs: The prefix deep link is swaglabs:// and the following screens (with their arguments) can be used:
swaglabsDeepLink= "swaglabs://"
packageName= "com.swaglabsmobileapp"

# Swag overview screen: swag-overview/ids where ids is a string of numbers from 0-5 separated with a ,. For example swag-overview/0,2. The number represents a product.
swagItemsOverview= ${swaglabsDeepLink}"swag-overview"

# Swag details screen: swag-item/id where id is a number from 0-5. For example swag-item/0
swagItemDetails= ${swaglabsDeepLink}"swag-item"

# Cart screen: cart/ids where ids is a string of numbers from 0-5 separated with a ,. For example cart/0,2. The number represents a product.
swagCartScreen= ${swaglabsDeepLink}"cart"

# Personal info screen: personal-info/ids where ids is a string of numbers from 0-5 separated with a ,. For example cart/0,2. The number represents a product.
swagPersonalInfo= ${swaglabsDeepLink}"personal-info"

# Checkout overview screen: checkout-overview/ids where ids is a string of numbers from 0-5 separated with a ,. For example cart/0,2. The number represents a product.
swagCheckoutOverviewScreen= ${swaglabsDeepLink}"checkout-overview"

# Complete screen: complete
swagCompleteScreen= ${swaglabsDeepLink}"complete"

# Webview screen: webview
swagWebviewScreen= ${swaglabsDeepLink}"webview"